# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xt34k5tRLYSAExeL7HQZkh5Twt4ZJET_
"""

#Değişken Standardizasyonu

import numpy as np
import pandas as pd
V1=np.array([1,3,6,5,7])
V2=np.array([7,7,5,8,12])
V3=np.array([6,12,5,6,14])
df=pd.DataFrame({"V1":V1,
                 "V2":V2,
                 "V3":V3})

df=df.astype(float)
df

##Standartlaştırmak= Veri setinin taşımış olduğu bilgiyi bozmadan belirli bir standarta getirir. Ama bilgiyi değiştirir. özütünü bozmadan belirli bir standarta getirir.
##Dönüştürme= Veri setinin taşımış olduğu bilgiyi bazen bozar bazen de temsil şeklini değiştirir.

#Standardizasyon (normal dağılım şeklinde dönüştürmeyi ifade ediyor.)
from sklearn import preprocessing
preprocessing.scale(df)  #bu fonk. dönüştür demek, hepsinde standart bir dönüşüm uygulandığından dolayı yapısında değişiklik olmaz.
#machine learning bazı algoritmalarını kullanmadan önce dönüştürme yapmak gerekir. Bu algoritmalar, dğeişken türlerinin farklı olmasını sevmez. Kullanılan değişken türlerinin aynı olması sağlanır.

df.mean()

##Normalizasyon (Değerleri 0 ile 1 arasına dönüştürmek için kullanılır.)
preprocessing.normalize(df)

##Min-Max Dönüşümü (istenilen iki değer min-max arasında dönüşümünün yapılması istenirse)
scaler=preprocessing.MinMaxScaler(feature_range=(10,20))
scaler.fit_transform(df)

"""# **Değişken Dönüşümleri**

Her bir standardizasyon zaten dönüşümdür. Burada değişkenler dönüştürülürken mevcut yapı bozuluyor mu bozulmuyor mu?
"""

import seaborn  as sns
df=sns.load_dataset('tips')
df.head()

##0-1 Dönüşümü

from sklearn.preprocessing import LabelEncoder  #cinsiyer değişkeni 1 0 şeklinde dönüştürülürse

lbe=LabelEncoder()
lbe.fit_transform(df["sex"])

df["yeni_sex"]=lbe.fit_transform(df["sex"])
df

##1 ve diğerleri 0 dönüşümü

df.head()

import numpy as np
df["yeni_day"]=np.where(df["day"].str.contains("Sun"), 1, 0)  #sun 1 olur diğer günler 0

df

#Çok Sınıflı Dönüşüm
from sklearn.preprocessing import LabelEncoder
lbe=LabelEncoder()

lbe.fit_transform(df["day"])

"""## **One-Hot Dönüşümü ve Dummy Değişken Tuzağı**"""

df.head()

df_one_hot=pd.get_dummies(df, columns=["sex"], prefix=["sex"])
df_one_hot.head()

#bir değişkeni ifade eden başka bir değşken tuzağı varda buna Dummy değişken tuzağı denir.

pd.get_dummies(df, columns=["day"], prefix=["day"]).head()  #günleri tek tek alır. Kategorik sınıf arttığında değşkenlerin birbiri üzerinden oluşturulması durumu güçlerşir.Onehotta