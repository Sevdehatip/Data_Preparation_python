# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iGbK6bJPZyqD_As0gxFFfKUe2PYvaFSD
"""

import numpy as np
import pandas as pd
V1=np.array([1,3,6,np.NaN,7,1,np.NaN,9,15])
V2=np.array([7,np.NaN,5,8,12,np.NaN,np.NaN,2,3])
V3=np.array([np.NaN,12,5,6,14,7,np.NaN,2,31])
df=pd.DataFrame(
    {"V1":V1,
     "V2":V2,
     "V3":V3})
df

#sayısal değişkenlerde atama
df["V1"].fillna(0)  #bütün eksik değerlere 0 ı atamış olur.

df["V1"].fillna(df["V1"].mean()) #tüm eksik yerlere ortalama gelir.

#tüm değişkenler için birinci yol
df.apply(lambda x:x.fillna(x.mean()), axis=0)  #bütün değişkenlerdeki eksiklikler kendi ortalamalarıyla dolmuş olur

#ikinci yol
df.fillna(df.mean()[:])

df.fillna(df.mean()["V1":"V2"])

df["V3"].fillna(df["V3"].median()) #v3 kendi medianı ile dolmuş olur

#üçüncü yol 
df.where(pd.notna(df), df.mean(), axis="columns")

#kategorik değişken kırılımında değer atama

V1=np.array([1,3,6,np.NaN,7,1,np.NaN,9,15])
V2=np.array([7,np.NaN,5,8,12,np.NaN,np.NaN,2,3])
V3=np.array([np.NaN,12,5,6,14,7,np.NaN,2,31])
V4=np.array(["IT","IT","IK","IK","IK","IK","IK","IT","IT"])
df=pd.DataFrame(
    {"maas":V1,
     "V2":V2,
     "V3":V3,
     "departman":V4})
df

df.groupby("departman")["maas"].mean() #departmanlar gruplamarak o gruplar içerisindeki maaş ortalamaları alınır

df["maas"].fillna(df.groupby("departman")["maas"].transform("mean")) #fillna gruplara göre bölünmüş olduktan sonra hesaplanmış olan ortalamaları boşluklara doldurmuş olacak

V1=np.array([1,3,6,np.NaN,7,1,np.NaN,9,15])
V4=np.array(["IT",np.nan,"IK","IK","IK","IK","IK","IT","IT"], dtype=object)
df=pd.DataFrame(
    {"maas":V1,
     "departman":V4})
df

df["departman"].fillna(df["departman"].mode()[0])

df["departman"].fillna(method="bfill") #bu sonraki değerle doldurma işlemidir.

df["departman"].fillna(method="ffill") #kendisinden bir öğrenceki değrle doldurmuş olur.

###Tahmine Dayalı Değer Atama Yöntemleri

import seaborn as sns
import missingno as msno
df=sns.load_dataset('titanic')
df=df.select_dtypes(include=['float64','int64'])
print(df.head())
df.isnull().sum()

!pip install ycimpute

from ycimpute.imputer import knnimput
var_names=list(df)

import numpy as np
n_df=np.array(df)

n_df[0:10]

n_df.shape

dff=knnimput.KNN(k=4).complete(n_df)

#dff bu numpy arrayidir. bunu çevirmek için
dff=pd.DataFrame(dff, columns=var_names)
type(dff)

dff.isnull().sum()

###ramdom forests

import seaborn as sns
import missingno as msno
df=sns.load_dataset('titanic')
df=df.select_dtypes(include=['float64','int64'])

df.isnull().sum()

var_names=list(df)

import numpy as np
n_df=np.array(df)

from ycimpute.imputer import iterforest
dff=iterforest.IterImput().complete(n_df)

import pandas as pd
dff=pd.DataFrame(dff, columns=var_names)
dff.isnull().sum()

###EM

import seaborn as sns
import missingno as msno
df=sns.load_dataset('titanic')
df=df.select_dtypes(include=['float64','int64'])

from ycimpute.imputer import EM
var_names=list(df)

import numpy as np
n_df=np.array(df)

dff=EM().complete(n_df)

dff=pd.DataFrame(dff, columns=var_names)

dff.isnull().sum()  #yani eksiklerin hepsi dolmuş oldu.